#!/usr/bin/more
#(Wow! executable documentation!)
/*
 * dcon version 0.9? April 1996.
 *
 * Copyright (C) 1989,1996,1997  Daniel Chouinard, Longueuil, Quebec, Canada.
 *
 * Permission to use, copy, and distribute this software and its
 * documentation for any purpose without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.
 *
 * Permission to modify the software is granted, but not the right to
 * distribute the modified code so that only one version of the language
 * syntax may be agreed upon.
 *
 * This software is provided "as is" without express or implied warranty.
 *
 * Send your comments suggestions, or bug reports to
 *  Daniel.Chouinard@pwc.utc.com
 *
 */

                      dcon.doc : Documentation for dcon


-- Contents

You can search for "-- xxxxx" to reach a specific section.

-- Contents
-- Quick start
-- Synopsis
-- Features
-- Examples list
-- Installation
-- Calling syntax
-- Simple examples
-- Replacing chat
-- Verbose output
-- Connecting to ISP using PPP script example
-- Notes on invocation
-- Programming manual
   -- Syntax
   -- Error reporting
   -- Exit codes
   -- Commands
   -- Integer functions
   -- String functions
   -- Test operators
   -- Expression operators
-- History
-- Pre-history
-- Known "features"
-- Todo


-- Quick start

   1: edit Makefile to (maybe) change BINDIR to where you want dcon installed
   2: make install

If you just want a quick script to connect PPP to your Internet Service
Provider (ISP),

   3: makescript
   4: Try the script
   5: Read this document to figure what where you or I goofed.  :)
   6: Look at ppp-ex.scr to look at dcon's syntax.
   7: Read the programming manual (in this document)


-- Synopsis

dcon is a scripting language interpreter useful for establishing
communications on serial lines.  Some uses include automated scripts
to connect to ISP's, tech support clients, BBS'es, etc... dcon has some
features that are rarely found in other utilities of the same type.

-- Features

  - Simple, BASIC-like script language.
  - Command-line and file sourcing of script.
  - Multi-response waitfor.
  - waitquiet permits line stabilization.
  - In-line text capture.
  - Multi-process support: fork, wait, kill, exit.
  - Debugging verbose and log output.
  - logging to file.
  - Flow control: goto, gosub, return, if, else.
  - Low-impact on system resources.
  - Time commands and functions.
  - String manipulations.
  - Environment manipulation: env(), putenv.
  - External utilities system calls: system, exec.

In this package, you will find source code (don't laugh), documentation and
script examples that should enable you to become a dcon script author in
minutes.  It's quite easy if you've programmed in any language, especially
(don't laugh) BASIC.  It's nowhere near perfect (don't laugh), the getvalue()
function is brain-dead (don't laugh), has only integer and string variables
(don't laugh), a limitied set of operators, functions and commands.
You can stop laughing now.
For all its shortcomings, dcon is great to connect you to the outside world
quickly, intelligently, and with versatility.


-- Examples list

The example scripts in this package are:

Filename        Description
-------------   --------------------------------------------------------------
ppp-ex.scr      Script to connect to an Internet service provider using ppp
                with the ISP using an Annex terminal server.  This file is
                also used as source to "makescript"; a utility to create
                standard ISP-PPP scripts.  Don't modify, make a copy.

simplestppp.scr No fuss, no muss, dial ISP.  Doesn't do much.

tst.scr         Script to test dcon's functionnality.  All tests do not use
                any communication equipment

loopback.scr    Script to test with a loopback installed on a COM port.


If you would like to contribute more scripts to be included in this
package, please do so!  scripts for ISPs, BBSs, using cu, sz, rz, kermit,
minicom, seyon, or whatever.  Just send them thru E-Mail to the author.
Please comment your scripts.


-- Installation

  edit Makefile to change BINDIR
  make install
  cp dcon.doc .....        (anywhere you keep your text doc files)


-- Calling syntax

dcon [-v] [-e] [-t x] [-d device] [-s 'script...'] [script]

  -v  : Turn verbose on.  dcon will print the script and an execution trace
        on stderr.  This can be re-directed with "2>/tmp/output".
  -e  : Turn communication echo on.  This will display incoming characters
        as they are received on stderr.
  -t x: Set character x as line separator.  This is used to indicate line
        cuts when the script is specified on the command line (-s...)
  -d x: This opens the serial device x prior to executing the script.
        Optional.  This can also be done in the script proper.
  -s x: Specify script.  If both -s and scriptfile are specified, scriptfile
        is concatenated at the end of the command-line specified script.
script: Specify script file.  The script file is read entirely in memory
        before it's executed.  This argument MUST be specified last.

You can also group arguments. dcon -d /dev/cua1 -e -v script
                    or      : dcon -evd/dev/cua1 script

-- Simple examples

- Execute script
dcon script.scr

You can also have "#!/usr/local/bin/dcon" as the first line of your scripts,
chmod them so they're executable and so directly execute them.

- Execute script with parameter passing
dcon -t";" -s"let \$n=555-4411; let \$u=username" script.scr
( This attributes 555-4411 to variable $n and "username" to $u before
  the script is executed )

Also, you can pass environment parameters to dcon script via $env().

- Shell script example
#!/bin/sh
dcon -s '
open com /dev/cua1
set com 38400n81
send "atdt555-4411^m"
waitfor 60 "connect"
print "Connected!"
exec "cu -l /dev/cua1 -s 38400"
'

Note that the single quote which encompasses this little dcon script should
not be used inside the script unless escaped with a backslash.


-- Replacing chat

chat is a(n?) utility that comes with the ppp package (for Linux, anyway) that,
with a set of expect-send string couples, does enough to connect most people
to ISP's and such.  While chat's use is very simple, it isn't very flexible.
That's where dcon picks it up.

dcon can be used in place of chat using the same strategy.  For example, a pppd
line reading: (taken from /usr/doc/ppp/README.linux)

pppd connect 'chat -v "" ATDT5551212 CONNECT "" ogin: ppp word: whitewater' \
     /dev/cua1 38400 debug crtscts modem defaultroute

Would, using dcon, read:

pppd connect 'dcon /root/scripts/isp.scr' /dev/cua1 38400 debug crtscts \
     modem defaultroute

And the isp.scr script would read:

send "ATDT5551212^m"
waitfor 60 "ogin:"
send "ppp^m"
waitfor 60 "word:"
send "whitewater^m"

Of course it then becomes trivial to make this script a whole lot more
functionnal (busy detect, re-dialing, etc...)

The whole script could even be on the command line like so:

pppd connect 'dcon -t";" -s\'send "ATDT5551212^m"; waitfor 60 "ogin:"; \
              send "ppp^m"; waitfor 60 "word:"; send "whitewater^m"\' \
     /dev/cua1 38400 debug crtscts modem defaultroute

Altough that's starting to look real butt-ugly.

In all these cases pppd calls another utility to establish the call up to
the point where the remote machine starts the PPP negotiation.  In the
sample script ppp-ex.scr, this formula is reversed; it is the other utility
that calls pppd.  The result is the same but for the fact that control is
then left in the script, even after the PPP link is fully established.


-- Verbose output

When dcon's verbose is turned on, dcon reports everthing but the weather on
the standard error output channel (can be re-directed with 2>/tmp/output.)

If turned on from the command line (-v), the output contains 4 sections.

- Command line argument actions
  These are actions taken because they were specified from the command line,
such as opening a communication device (-d), parsing a mini-script (-s), etc...
For these to be outputted, you must specify -v as the first argument.

- List of arguments
  The number and list of arguments passed to dcon.  This is useful in case you
have a bunch of environment variables or quotes, back-quotes, backslashes on
the command line and you're not sure what dcon really sees.

- Script list
  A list of the script to execute.  This may be a concatenation of a
mini-script (-s) and a script file.  Every line is listed with its line number
and character position.

- Execution output
  List of commands as they are executed.  dcon's parser prints the line it's
currently on, starting from the exact point where it's at to the end of the
line.  Multiple command groups on a single line produce multiple output lines.
Verbose output may be mixed with script output (print, eprint or lprint.)

Here's an example:

$ dcon -v -e -d/dev/cua1 -t";" -s 'set com 38400n81 let a=2' blah.scr
dcon 00:18:46 -> Verbose output enabled
dcon 00:18:46 -> Communication echo turned on
dcon 00:18:46 -> Opened /dev/cua1 as FD 3
dcon 00:18:46 -> Alternate line terminator set to ";"
dcon 00:18:46 -> Read 25 bytes mini-script from command line
dcon 00:18:46 -> Script file: blah.scr
dcon 00:18:46 -> argc:8
dcon 00:18:46 -> argv[0]=dcon
dcon 00:18:46 -> argv[1]=-v
dcon 00:18:46 -> argv[2]=-e
dcon 00:18:46 -> argv[3]=-d/dev/cua1
dcon 00:18:46 -> argv[4]=-t;
dcon 00:18:46 -> argv[5]=-s
dcon 00:18:46 -> argv[6]=set com 38400n81 let a=2
dcon 00:18:46 -> argv[7]=blah.scr
dcon 00:18:46 ->  ---Script---
   1@0000 set com 38400n81 let a=2
   2@0025 print "9x",a,"=",9*a,"\n"
   3@0051 sleep 5
   4@0059 exit 0
dcon 00:18:46 ->  ---End of script---
dcon 00:18:46 -> @0000 set com 38400n81 let a=2
dcon 00:18:46 -> @0017 let a=2
dcon 00:18:46 -> @0025 print "9x",a,"=",9*a,"\n"
9x2=18
dcon 00:18:46 -> @0051 sleep 5
dcon 00:18:51 -> @0059 exit 0


-- Connecting to ISP using PPP script example

I used to have a copy of ppp-ex.scr in this documentation but every time I
made modifications to one, I had to modify the other as well.  And because
one was documented and the other not, it became fastidious to maintain the two.
So, screw it.  Go take a look at ppp-ex.scr

Be aware that you should not modify ppp-ex.scr since it is used as input for
makescript.

-- Notes on invocation

I have a .fvwmrc line in my Menu pop-up that reads:

 Exec "ISP-PPP" /usr/bin/X11/rxvt -geometry 40x4 -e dcon /root/scr/ISP.scr

This starts up a small window into which the script is executed.
While I'm online I see a neat little timer (I pay for my internet access).
When I want to disconnect from the ISP, I just type ENTER in the window and,
click!, it disconnects and the window closes.

makescript produces scripts that do this automatically.

From a VT, I just type "callisp" which is a shell script that reads:
#!/bin/sh
dcon /root/scr/ppp.scr

Leave it running there, switch to another VT and get back to it later.

Of course, if you plan to use a copy of ppp-ex.scr, you'll have to change
$u (your username), $p (your password), $n (your ISP number), where pppd
is called from ($p8), same for ppp-off ($p9), $u1, $p1, $s1 (prompts),
and maybe a few other things.
If you have problems, try 'set comecho on' to see what your ISP is saying.
If your script terminates with an error, try calling it with the -v switch
so that you may follow its execution step by step.


-- Programming manual

-- Syntax

The syntax used for dcon scripts is rather simple, somewhat BASIC-like.
A script is a non-tokenized, pure ASCII text file containing lines terminated
by newline characters (Unix standard.)  Scripts can be created and/or modified
using any standard text editor (vi, vim, joe, pico, emacs, ed (Yikes! :) )
Lines in a dcon script read like so:

 - Empty line
 - [indentation]rem remark
 - [indentation][[:|label] LABEL] [command [arguments]] rem remark
 - [indentation][[:|label] LABEL] [command [arguments]] [command [arguments]]...

Characters used for indentation are the space and tabulation characters.
The rem command makes the script parser skip the rest of the line.
The rem command can also be stipulated as "#" or "//".

Labels consists of lowercase and uppercase letters and digits.
Case is ignored in labels.

Commands and their arguments are separated by spaces and/or tabs.
Command groups are separated by spaces, tabs, or newlines.

Expressions must not contain spaces or tabs.
This is ok : let n=x+76
This is not: let n= x + 76
  Because this space ^ would terminate the let command group.


-- Error reporting

When dcon detects a script error, it immediately turns on verbose mode,
generates a dump (see the dump command), reports the error in three lines
and stops the execution.  The first line reported is the command group
being executed, the second one shows where the parser got and the third
line reports the character position of the program counter, the error and
the exit code.

Here's an example:

$ dcon -s'inc n dec d3 let a=58/3 let $d="fod" let c=1/0 let $y4="sdfgsdfgsdfg"'
dcon 19:03:28 -> -- Integer variables --
dcon 19:03:28 ->  a = 19
dcon 19:03:28 ->  d3= -1
dcon 19:03:28 ->  n = 1
dcon 19:03:28 -> -- String variables --
dcon 19:03:28 -> $d = "fod"
dcon 19:03:28 -> -- Error Report --
dcon 19:03:28 -> @0036 let c=1/0 let $y4="sdfgsdfgsdfg"
dcon 19:03:28 -> ---->         ^
dcon 19:03:28 -> Error @46, line 1, Division by zero. (6)


-- Exit codes

When dcon terminates, it does so with an "exit code".  That is a number passed
back to the calling process to signify success or failures.  In every-day
Unix, 0 (zero) means success and everything else means whatever the author
of the program wants it to mean.  In a shell script, or directly on the command
line, you may look at the content of '$?' after having called dcon to examine
its exit code.

Example:

#!/bin/sh
dcon /root/bin/call-isp
if [ $? != 0 ]; then
  echo "Oops! Something went wrong."
fi

Internal dcon error codes are as follows:

0 : No problems whatsoever.  Apparently.
1 : Communication device problems.
2 : Console (tty) device problems.
3 : Memory problems.
4 : File or pipe problems.
5 : Syntax errors.
6 : Division by zero.
7 : Variable mis-management.
8 : System problems.  (Couldn't call /bin/sh or some such)


-- Commands

Command     : :   Alias: label
Description : Notes an anchor point for goto or gosub to branch to.
Syntax      : Keyword must not contain any special characters.
Note        : Must be first statement in a line.
See Also    : goto, gosub, return.
Example:
              :loop
              gosub bravo
              print "The time is ",$time(),"\n"
              sleep 1
              goto loop
              label bravo
              print "Twonk!\n"
              return

Command     : abort
Description : Causes dcon to call abort() and produce a core dump.
Syntax      : abort
Notes       : Why would anyone find this useful, I don't know.
See Also    : dump, exit.


Command     : cd
Description : Change directory.
Syntax      : cd directory
Notes       : -1 is returned in % if the change could not be made.
Notes       : directory is a string and thus could be a variable.
See Also    : $cwd().
Example:
              cd "duh"
              if % != 0 print "Could not cd into duh.\n"


Command     : close
Description : closes file previously opened with open.
Syntax      : close file
See Also    : open.


Command     : dec
Description : Decrements the content of an integer variable by 1.
Syntax      : dec x
Notes       : x is from a to z or a0 to z9.
Notes       : Note that "let x=x-1" also works.
See Also    : let, inc.


Command     : dump
Description : Lists all non-zero integer variables and modified string
Description : variables as log entries (standard error channel.)
Syntax      : dump
See Also    : abort, exit


Command     : else
Description : Alternatively execute commands if last 'if' tested false.
Syntax      : else commands...
See Also    : if
Example:
              if w<350 print "Wow! Imagine that.\n"
              else print "Rush Limbaugh is indeed a big fat bastard.\n"


Command     : eprint
Description : print a comma-separated list of arguments on stderr.
Syntax      : eprint var,stringvar,"text",...
Notes       : Like print but on the standard error file descriptor.  The error
Notes       : output can be re-directed with "2>file" on the command line.
See Also    : print.


Command     : exec
Description : Replaces current dcon process with another process.
Syntax      : exec "command -args..."
See Also    : system, fork.
Example:
              #Finished script, call cu.
              exec "cu -l "+$dev()+" -s "+$baud()


Command     : exit
Description : terminates script execution with exit code.
Syntax      : exit exit_code
See Also    : abort, dump.
Example:
              :error
              exit 1
              :smeggit
              exit 0


Command     : flash
Description : Toggles DTR on communication device for a specified time.
Syntax      : flash float_constant
Notes       : float_constant is precise down to 1/100th sec.
Notes       : Causes modem to drop carrier or go to command mode, depending
Notes       : on modem settings.  Setting the baud rate to 0 for a time has
Notes       : the same effect.
See Also    : sleep, set com.
Example:
              :disconnect
              flash 0.5
              exit 0


Command     : fprint
Description : print a comma-separated list of arguments in a file.
Syntax      : fprint var,stringvar,"text",...
Notes       : Like print but appended to a file previously opened by open.
See Also    : print.


Command     : fork
Description : forks dcon process in two.  Both processes continue executing
Description : the script.
Syntax      : fork
Notes       : % returns 0 for child process, new process ID for parent or
Notes       : -1 for error.
See Also    : wait, kill, pid(), ppid().
Example:
              fork
              if % = -1 goto error
              if % = 0 goto child
              :parent
              ...

Command     : get
Description : get string from communication device.
Syntax      : get timeout "terminators" $string
Notes       : timeout is a float constant, terminators is a list of characters
Notes       : that, when received, terminate get.  Terminators are ignored when
Notes       : received first.
See Also    : waitfor.
Example:
              waitfor 60 "connect"
              if % != 0 goto error
              get 2 " ^m" $s
              print "Connection parameters: ",$s,"\n"


Command     : gosub
Description : calls a subroutine.
Syntax      : gosub label
Notes       : Currently, dcon only supports 128 levels of gosub calls (enough!)
See Also    : :, goto, return.
Example:
              gosub routine
              sleep 1
              gosub routine
              goto end
              :routine
              print "Flim-flam!\n"
              return


Command     : goto
Description : Sends execution somewhere else in the script.
Syntax      : goto label
See Also    : :, gosub, return.
Example:
              :win95
              print "Today I want to go and use Linux, thank you.\n"
              goto win95


Command     : hset
Description : Set the hundreds timer.
Syntax      : hset value
Notes       : This command resets the hundreds of seconds timer to a value
Notes       : for htime to start from.
See Also    : htime().
Example:
              hset 0
              :loop
              print "Time in 1/100 of a sec.: ",htime(),"\n"
              sleep 0.01
              goto loop


Command     : if
Description : tests a condition
Syntax      : if test_condition commands...
Notes       : Conditionnaly executes commands if test condition is true.  Test
Notes       : operators are = (equal), != (not equal), <> (not equal too)
Notes       : < (less than), > (greater than), <= (less or equal),
Notes       : >= (greater or equal).  All operators can be used with
Notes       : integers and strings.  If test_condition is false, if skips to
Notes       : the next line.
See Also    : else.
Example:
              if n>30 print "Oh-ho! too many sheep!\n" goto error
              if n=17 print "Hurray! we've got exactly enough sheep for a party!\n" goto party
              if n<17 print "Murray will have to get more sheep.\n" goto getmore
              if $z < "Marmaluke" goto ...
              if 3*a>5+b goto ...


Command     : inc
Description : increments the content of an integer variable by 1.
Syntax      : inc x
Notes       : x is a-z or a0-z9.
See Also    : dec, let.


Command     : input
Description : input string from keyboard into string variable.
Syntax      : input $x
Notes       : input terminates entry only with the ENTER key.  Spaces, tabs
Notes       : and other funny characters are all stored in the variable.
See Also    : set echo.
Example:
              print "Enter your full name :"
              input $n4


Command     : kill
Description : Sends a signal to a process.
Syntax      : kill signal processID
Notes       : Both signal and processID are integer values.  Same as standard
Notes       : unix kill except that signal aliases are not accepted and signal
Notes       : is not optional.
Notes       : 0 is returned in % if the signal could be sent, -1 otherwise.
Notes       : Signal 0 can be used to detect process existance.
See Also    : wait, pid(), ppid().
Example:
              fork
              let p=%
              if p = 0 goto child
              sleep 300
              kill 15 p
              sleep 1
              kill 0 p
              if % != 0 print "Child terminated\n" goto ok
              print "Could not terminate child!\n"
              kill 9 p
              sleep 1
              kill 0 p
              if % = 0 print "Could not kill child!\n" goto error
              print "Child killed.\n"
              :ok
              ...


Command     : let
Description : Does a variable assignment.
Syntax      : let x=content
Notes       : x is [$]a0-z9.
See Also    : inc, dec.
Example:
              let a=5
              let b=(time()-a)+5
              let y7=6809
              let z=0%11010111  #Binary
              let z=077324      #octal
              let z=0xf5b8      #hexadecimal
              let $c="Daniel "
              let $d=$c+" Chouinard"
              let $s5="Frimpin' Jeosaphat!"


Command     : lprint
Description : Print a comma-separated list of arguments to the log.
Syntax      : fprint var,stringvar,"text",...
Notes       : Like print but printed like a log entry if verbose is on.
Notes       : logging is sent to stderr.
See Also    : print, eprint, fprint.


Command     : open
Description : Opens a file or a communication device.
Syntax      : open com device, open com (stdin), open file FILE
See Also    : close.
Example:
              open com /dev/cua1
              set com 38400n81
              open file "/tmp/log"
              fprintf "This is a log\n"
              close file


Command     : print
Description : print a comma-separated list of arguments.
Syntax      : print var,stringvar,"text",...
Notes       : Spaces and newlines are not automatically added.
See Also    : eprint, fprint, lprint.
Example:
              let b=26
              let $c="text variables"
              print "Contstant text ",b," ",$c," time: ",$time(),"\n"


Command     : putenv
Description : Sets an environement variable.
Syntax      : putenv "var=content"
Notes       : Environement variables are automatically exported, never returned.
Notes       : Children processes inherit the environment
See Also    : $env().
Example:
              putenv "SCRIPTDIR=/usr/lib/dcon/scripts"
              system "dothat"  # dothat reads env. var. SCRIPTDIR...


Command     : rem  Aliases: #, //
Description : Remark.  Rest of line is ignored.
Syntax      : Note that a space must follow "rem".
Example:
              #This is a remark
              // So is this
              rem This ain't no disco.


Command     : return
Description : Returns from subroutine.
Syntax      : return
See Also    : gosub.


Command     : send
Description : sends a string to the communication line (modem usually).
Syntax      : send string
Notes       : Carriage return (ENTER) is not sent automatically (use ^m).
Example:
              send "atdt555-1212^m"
              send $g+"^m"
              send "The time is "+$time()+"^m^j"


Command     : set
Description : sets working parameters.
Syntax      : set parameter value
Notes       :

Command                       Description
----------------------------- -------------------------------------------------
set echo on|off               Keyboard echo on-screen
set comecho on|off            Received characters echoed on-screen
set senddelay time_constant   In-between character delay for 'send'
set ignorecase on|off         Case sensitivity for 'waitfor'.  Default=on
set clocal on|off             clocal on = ignore modem signals
set umask mode                file mode creation defaults.  See man umask
set verbose on|off            verbose on = debug output enabled (lots)
set com com_params            communication parameters. ex.: 19200n81, 300e71
                                                             baud |||
                                                          Parity--|||
                                                        Data bits--||
                                                       Stop bits----|

Example:
              set echo off
              print "Password :"
              input $p
              print "\n"
              set echo on
              set comecho on
              set clocal on
              set senddelay 0.1
              set ignorecase on
              set com 38400n81
              set umask 022  #Make sure you specify it in octal (leading zero)
              ...

Note on clocal:
  If want your script to keep working after the carrier detect signal has
  dropped, set clocal on, otherwise, a CD drop causes the device line to
  close (hang up).  This could happen if, let's say, your script calls and
  connects, then disconnects or drops dtr (flash), then tries to re-connect
  again.


Command     : sleep
Description : Pauses execution.
Syntax      : sleep float_constant
Notes       : Float_constant is precise down to 1/100th sec, unless more
Notes       : than 100 second, in which case the precision falls down to 1 sec.

Example:
              sleep 0.06
              sleep 3
              sleep 86400 /* A whole day */


Command     : system
Description : Calls a system (unix) command
Syntax      : system "command"
See Also    : exec.
Example:
              :dir
              print "listing of directory ",$cwd(),\n"
              system "ls -l |more"


Command     : testkey
Description : Tests keyboard for keystroke, returns 1 in % if present.
Syntax      : testkey
Notes       : Can only test for ENTER key.  Future versions of dcon will test
Notes       : for more and return keycode in %.
See Also    : input.
Example:
              let n=1
              :loop
              print n," sheep... ZZZzzz...\n"
              sleep n
              inc n
              testkey
              if % = 0 goto loop


Command     : wait
Description : Wait for a child process to terminate.
Syntax      : wait
Notes       : Process ID of terminated child is returned in %
See Also    : fork, kill.
Example:
              fork
              let p=%
              if p=0 goto child
              if p=-1 goto error
              print "Waiting for child to finish..."
              wait
              print "\n"
              if %!=p print "HA! wait didn't return the right process number!\n" goto error
              print "Child is done.\n"


Command     : waitfor
Description : Waits until one of a list of strings is received
Syntax      : waitfor timeout "string1","string2","string3"...
Notes       : Timeout is a floating time constant.  waitquiet returns
Notes       : 0 for the first string received, 1 for the second, etc...
Notes       : and -1 for a timeout.  Case is ignored by default unless
Notes       : ignorecase is set to off.
See Also    : get.
Example:
              :dial
              send "atdt555-4411^m"
              waitfor 60 "no carrier","busy","no dial tone","voice","connect"
              if % = -1 goto timedout
              if % = 0 goto nocd
              if % = 1 goto redial
              if % = 2 goto error
              if % = 3 goto hohoho
              if % = 4 goto connected


Command     : waitquiet
Description : Waits until communication line stops receiving for a time.
Syntax      : waitquiet timeout quiettime
Notes       : Both timeout and quiettime are floating time constants
Notes       : with 1/100th sec. accuracy.  Usefull for "swallowing" incoming
Notes       : characters for a while or waiting for an unknown prompt.
Example:
              :closecon
              send "logoff^m"
              waitquiet 10 0.5
              send "yes^m"


-- Integer functions

I-Function  : Access
Description : Verifies access rights to a file
Syntax      : let x=access("/tmp/file","frwx")
Notes       : The second string contains one or more of 'f','r','w','x'
Notes       : to repectively check existence, read, write and execute
Notes       : permissions.  Under root id, the only useful check is 'f', as
Notes       : all others will return true.
Return Value:  0 if the file exists, is readable, writable, executable, or
Return Value: -1 if not.
See Also    : man access(2)

I-Function  : baud
Description : Returns current baudrate of communication line.
Syntax      : let x=baud()
Notes       : Does not necessarily match the modem connection speed.
See Also    : $baud().

I-Function  : len
Description : Returns the length of a string.
Syntax      : let x=len($s)
Notes       : "" is zero.  Strings currently have a maximum length of 1024
Notes       : characters.  dcon doesn't handle string overflow at all.

I-Function  : htime
Description : Returns hundreds of seconds since start of script.
Syntax      : let x=htime()
Notes       : Set to a specific value with hset.
See Also    : hset.

I-Function  : pid
Description : Returns process ID number of current process (dcon's.)
Syntax      : let x=pid()
See Also    : ppid(), fork

I-Function  : ppid
Description : Returns process ID number of parent process.
Syntax      : let x=ppid()
Notes       : Can be used by 'fork'ed child to detect parent process.

I-Function  : time
Description : Returns time in seconds since Jan 1, 00:00:00 1970 GMT.
Syntax      : let x=time()
Notes       : Used to calculate time differences.
See Also    : $time()


I-Function  : val
Description : Returns value of string.
Syntax      : let x=val($x)
Notes       : String is not an expression; must only contain [0-9] characters
Notes       : Future versions of dcon will be able to evaluate expressions.
Notes       : (Maybe) (This was written 6 years ago.)


I-Function  : verbose
Description : Returns value of verbose setting.
Syntax      : let x=verbose()
Notes       : 0=off, 1=on.


-- String functions

S-Function  : basename
Description : Returns basename part of path.
Syntax      : let $x=$basename($p)
Notes       : $basename("/usr/bin/more")="more"
See Also    : $dirname().

S-Function  : baud
Description : Returns string representation of current baud rate.
Syntax      : let $x=$baud()
Notes       : Defined by 'set com'
See Also    : baud(), set com.

S-Function  : cwd
Description : Returns current working directory pathname.
Syntax      : let $x=$cwd()
See Also    : cd.

S-Function  : dev
Description : Returns current communication device pathname.
Syntax      : let $x=$dev()
Notes       : defined by '-d' command line argument or 'open com'
See Also    : open com.

S-Function  : dirname
Description : Returns directory name part of path.
Syntax      : let $x=$dirname($p)
Notes       : $dirname("/usr/bin/more")="/usr/bin"
See Also    : $basename().

S-Function  : env
Description : Returns content of an environment variable
Syntax      : let $x=$env("HOME")
Notes       : Non-existant variables return an empty string.
See Also    : putenv.

S-Function  : hex
Description : Converts value to hexadecimal representation
Syntax      : let $x=$hex(x)
Notes       : Letters a-f in lowercase, no preceding "0x"
See Also    : $hexu(), $oct().

S-Function  : hexu
Description : Converts value to hexadecimal representation
Syntax      : let $x=$hex(x)
Notes       : Letters A-F in uppercase, no preceding "0x"
See Also    : $hex(), $oct().

S-Function  : hms
Description : Converts number of seconds into time string
Syntax      : let $x=$hms(x)
Notes       : Format is "HH:MM:SS".  Useful for chronometer displays
Notes       : Use with 'time()', do not try to increment a variable every
Notes       : second using 'sleep 1'.  (See ISP script example)
Notes       : Format becomes "HHH:MM:SS" after 99 hours, 59 minutes, 59s...
See Also    : time().

S-Function  : left
Description : Returns left portion of a string
Syntax      : let $x=$left($s,l)
Notes       : $s=Source string, l=length
Notes       : l must be less than the length of the string.
See Also    : $right(), $mid().

S-Function  : mid
Description : Returns midsection of a string.
Syntax      : let $x=$mid($s,s,l)
Notes       : $s=Source string, s=start, l=length
Notes       : s must be less than the length of the string, l can be some
Notes       : huge number (9999) to return the right side of a string to
Notes       : the end.  the first character of a string is position 0, not 1.
See Also    : $right(), $left().

S-Function  : oct
Description : Converts value to octal representation.
Syntax      : let $x=$oct(x)
See Also    : $hex(), $hexu().

S-Function  : right
Description : Returns right portion of a string.
Syntax      : let $x=$right($s,l)
Notes       : $s=Source string, l=length
Notes       : l must be less than the length of the string.
See Also    : $left(), $mid().

S-Function  : rpipe
Description : Returns the first line from a system piped command
Syntax      : let $x=$rpipe("/bin/ls |grep myfile")
Notes       : Not very useful unless used with head, tail, grep, etc...
See Also    : system.

S-Function  : time
Description : Returns 24 character local time string
Syntax      : let $x=$time()
See Also    : time().
Notes       : Time is in this format: Mon Apr  8 14:21:22 1996
                                      012345678901234567890123
                                                1         2

S-Function  : tolower
Description : Returns lowercase'd string.
Syntax      : let $x=$tolower($y)

S-Function  : toupper
Description : Returns uppercase'd string.
Syntax      : let $x=$toupper($y)



-- Test operators

Operator Description       Example       Result
=        equal             if 1+2=3      yes
!=       not equal         if 1+2!=3     no
<>       not equal         if 1+2<>3     no
>        Greater than      if 1+3>3      yes
<        Less than         if 1+3<3      no
>=       Greater or equal  if 3>=3       yes
<=       Greater or equal  if 2<=3       yes

Strings can be compared using the same operators.
"aaa" < "aab",  "aaaa" > "aaa", "Test" != "test", "One" = "One", "A" > "a"
"Fumble" <= "Fumigate", "Farsical" <> "Comedic"
Note that 'set ignorecase on' does NOT apply to string comparisons.


-- Expression operators

Operator  Description      Example           Result
+         Addition         let a=2+2         4
+         Concatenation    let $b="aa"+"bb"  "aabb"
-         Substraction     let e=2-5         -3
*         Multiplication   let f=11*2        22
/         Division         let g=34/11       3
&         Bit-Wise AND     let h=42&7        2
|         Bit-Wise OR      let a=42|5        47
^         Bit-Wise XOR     let a=42^7        45

Mixed expression examples:

#Returns number of seconds since 00:00:00
let $t=$time() #Take a snapshot.
let a=(val(mid$($t,11,2))*3600)+(val(mid$($t,14,2))*60)+val(mid$($t,17,2))
#Notice the extra sets of parenthesis because dcon's expression evaluator
#is brain-dead.
#For example, 5-2+1 should give you 4, right?  Well, according to getvalue(),
#it actually gives 2, because it does it somewhat from right to left.
#So to evaluate 5-2+1 correctly, use (5-2)+1.  If you're using simple, two-
#element calculations, don't worry about it.  5-2 will give you 3.

#Concatenation  (Calls cu)
exec "cu -l "+$dev()+" -s "+$baud()"

#In a test condition
if a+c > strlen($c) goto toomuch

#String comparison
let $t=$mid($time(),11,8)
if $t > "19:59:59" print "Too late for that!\n" goto toolate
if $t < "08:00:00" print "Too early!\n" goto tooearly
if $t = "00:00:00" print "Oh god!  It's Twinkee time!\n"


-- History

Wed Jan  1 15:32:04 EST 1997
   - Made it case independent.
   - Happy new year!
   - Indexed labels, major speed improvement.

Mon Dec 30 21:10:46 EST 1996 not distributed
   - Fixed select() on comfd so that `pppd connect 'dcon script'` works again.


Mon Dec 23 16:10:24 EST 1996 not distributed
 22 hour session!
   - Added $right(), $left(), $dirname(), $basename(), $hex(), $hexu(), $oct(),
     $script(), $tolower(), $toupper(), and verbose() functions.
   - Added abort, flash, and dump commands.
   - Fixed #!/usr/local/bin/dcon support.
   - Fixed re-entrant getstring() bug.
   - Normalized gettoken() and getstring()
   - Used getopt() instead of if...else if...else if...
   - Added 0xffff (hex), 07777 (octal), 0%1111 (binary) notations.
   - Added [$]a0-z9 variable ranges and managed (Woohee!) to keep it
     compatible with old syntax.
   - Only allocate strings as needed.
   - Much better error reporting and exit code handling.
   - Pulled a groin muscle while sitting crooked.  Go figure.
   - Created makescript.
   - Added automatic xterm call in ppp-ex.scr when in X.
   - Doc: Contents, syntax, error reporting, added new functions, etc...

Wed Dec 11 18:30:42 EST 1996
   - Changed my E-mail address in doc.
   - Added a fix to dogoto() so that the label gets printed in log
     (less confusing to see if a goto or gosub in test executed or not.)
   - Had lasagna for supper.

Sometime a while ago before I moved (August 1996, I think)
   - Ansified code and Makefile, contributed by John Gotts.
     (You guys out there are such purists!  :)

Sat Jul 20 08:19:13 EDT 1996  V: 0.96
   - Better error reporting.

Fri Jul 19 22:29:37 EDT 1996
   - Got a bug report from Glen Thigpen that dcon-0.91 reports "Token too long"
     errors.  Found that dcon didn't deal with non-terminated last lines
     properly.  Fixed.

Mon Apr 29 21:38:04 EDT 1996  V: 0.95
   - Got a bug report from J. Van Koll reporting that the included
     ppp-ex.scr had two lines that were truncated.  Modified ppp-ex.scr


-- Pre-history

  I wrote most (90%) of dcon back in 1989 (it shows in the source code)
when I started doing Unix Apps tech support mostly by modem to customer
systems.  I was tired of typing all those passwords and funny call-charging
codes everytime I used cu.  Also, the company I worked for needed a system
that would log call times and estimated costs.  Thus dcon was born.
Fast forward six or seven years (today) and I was using pppd to connect to
my ISP site.  I was somewhat happy with 'chat' but found it lacking flow
control and multiple respone checks from "atdt..." I wanted it to do
different things for "no carrier", "no dial tone", and "busy".
Although I thought that chat's author would probably add more features
to it someday, although minicom probably does the work already, I found
dcon.c on one of my old 45M tapes.  So, I tried compiling it on my Linux
box and, lo and behold, wonder of wonders, it did.
In the end, I added a few things to it (kill, fork, wait, 1/100 sec. times)
and there you are.


-- Known "features"

The getvalue() parser.  It makes me laugh so I think I'll leave it that way.

-- Todo

Man page
Option: locking (uucp? What's the standard?) (Who cares?)
Better testkey (Change stdin mode to raw, update input, system, exec & exit)
getcomchar() (Get one byte from com so a dumb term could be written in a
              script.  Should be done only after testkey)
Polling sucks.  Could this be (major) changed to be interrupt-driven?
(Do people still use non-16550s out there?)

--
Daniel.Chouinard@pwc.utc.com
